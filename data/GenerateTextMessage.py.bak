# -*- coding: utf-8 -*-
"""
–î–∞–Ω–Ω–∞—è —Ñ-—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–∞—Ä—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞
"""

import datetime
from decimal import Decimal, ROUND_HALF_EVEN
import pandas as pd



class GenerateTextMessage():
    

    def abnormal_volume(self, row):
        
        """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–±—ä—ë–º–∞"""
       
        if row['chg. price %'].values[0] < 0:
            price_chg = str(row['chg. price %'].values[0])
        else:
            price_chg = "+" + str(row['chg. price %'].values[0])
        if row['chg. price_day %'].values[0] < 0:
            price_chg_day = str(row['chg. price_day %'].values[0])
        else:
            price_chg_day = "+" + str(row['chg. price_day %'].values[0])
        text = ""
        time = datetime.datetime.now().strftime("%H:%M:%S")
        text += f"<b>‚ÄºÔ∏è MARKET MOVEMENT  upd. {time}</b>\n\n"
        text += f"<b>Ticker: #{row['ticker'].values[0].replace('&', '').replace('_i', '')}</b>\n\n"
        candle_time = pd.to_datetime(row['time'], unit='s')[0].strftime("%d.%m.%Y %H:%M:%S")
        text += "‚ö†Ô∏è <u>Volume spike</u> üìä\n"
        text += f"Abnormal volume growth: <b>{row['delta'].values[0]} times</b>\n"
        text += f"Price change within 5 minutes: <b>{price_chg}%</b>\n"
        text += f"Today price change: <b>{price_chg_day}%</b>\n"
        text += f"Abnormal candle time: <b>{candle_time}</b>"
        return text
    
    def bullish_takeover(self, row):
        
        """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –±—ã—á—å–µ–π –ø–æ–≥–ª–æ—â–µ–Ω–∏–∏"""
       
        text = ""
        time = datetime.datetime.now().strftime("%H:%M:%S")
        text += f"<b>‚ÄºÔ∏è MARKET MOVEMENT  upd. {time}</b>\n\n"
        text += f"<b>Ticker: #{row['ticker'].values[0].replace('&', '').replace('_i', '')}</b>\n\n"
        candle_time = pd.to_datetime(row['time'], unit='s')[0].strftime("%d.%m.%Y %H:%M:%S")
        text += "<u>–ë—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ</u> üü¢\n"
        text += f"–í—Ä–µ–º—è —Å–≤–µ—á–∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è: <b>{candle_time}</b>"
        return text
    
    def bearish_takeover(self, row):
        
        """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –º–µ–¥–≤–µ–∂—å–µ–º –ø–æ–≥–ª–æ—â–µ–Ω–∏–∏"""
       
        text = ""
        time = datetime.datetime.now().strftime("%H:%M:%S")
        text += f"<b>‚ÄºÔ∏è MARKET MOVEMENT  upd. {time}</b>\n\n"
        text += f"<b>Ticker: #{row['ticker'].values[0].replace('&', '').replace('_i', '')}</b>\n\n"
        candle_time = pd.to_datetime(row['time'], unit='s')[0].strftime("%d.%m.%Y %H:%M:%S")
        text += "<u>–ë—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ</u> üî¥\n"
        text += f"–í—Ä–µ–º—è —Å–≤–µ—á–∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è: <b>{candle_time}</b>"
        return text
        
    def abnormal_price(self, row):
        
        """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        
        if row['chg. price %'].values[0] < 0:
            price_chg = str(row['chg. price %'].values[0])
        else:
            price_chg = "+" + str(row['chg. price %'].values[0])
        if row['chg. price_day %'].values[0] < 0:
            price_chg_day = str(row['chg. price_day %'].values[0])
        else:
            price_chg_day = "+" + str(row['chg. price_day %'].values[0])
        text = ""
        time = datetime.datetime.now().strftime("%H:%M:%S")
        text += f"<b>‚ÄºÔ∏è MARKET MOVEMENT  upd. {time}</b>\n\n"
        text += f"<b>Ticker: #{row['ticker'].values[0].replace('&', '').replace('_i', '')}</b>\n\n"
        candle_time = pd.to_datetime(row['time'], unit='s').astype('str')[0]
        if row['chg. price %'].values[0] >= 0:
            text += "‚ö†Ô∏è <u>Price growth</u> üìà\n"
            text += f"Abnormal spread candle within 5 minutes: <b>{price_chg}%</b>\n"
            text += f"Volume growth: <b>{row['delta'].values[0]} times</b>\n"
            text += f"Today price change: <b>{price_chg_day}%</b>\n"
            text += f"Abnormal candle time: <b>{candle_time}</b>"
        elif row['chg. price %'].values[0] <= 0:
            text += "‚ö†Ô∏è <u>Price drop</u> üìâ\n"
            text += f"Abnormal spread candle within 5 minutes: <b>{price_chg}%</b>\n"
            text += f"Volume growth: <b>{Decimal(row['delta'].values[0]).quantize(Decimal('1.00'), ROUND_HALF_EVEN)} times</b>\n"
            text += f"Today price change: <b>{price_chg_day}%</b>\n"
            text += f"Abnormal candle time: <b>{candle_time}</b>"
        return text
    
    
    def abnormal_density(self, row, high_density):
        
        """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–º —Ç–∏–∫–æ–≤–æ–º –æ–±—ä—ë–º–µ –∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–º —Ü–µ–Ω–æ–≤–æ–º —Å–ø—Ä—ç–¥–µ"""
        
        if row['chg. price %'].values[0] < 0:
            price_chg = str(row['chg. price %'].values[0])
        else:
            price_chg = "+" + str(row['chg. price %'].values[0])
        if row['chg. price_day %'].values[0] < 0:
            price_chg_day = str(row['chg. price_day %'].values[0])
        else:
            price_chg_day = "+" + str(row['chg. price_day %'].values[0])
        text = ""
        time = datetime.datetime.now().strftime("%H:%M:%S")
        text += f"<b>‚ÄºÔ∏è MARKET MOVEMENT  upd. {time}</b>\n\n"
        text += f"<b>Ticker: #{row['ticker'].values[0].replace('&', '').replace('_i', '')}</b>\n\n"
        candle_time = pd.to_datetime(row['time'], unit='s').astype('str')[0]
        text += "‚ö†Ô∏è <u>High order density</u>üîù\n"
        text += f"Spread candle within 5 minutes: <b>{Decimal(row['spread_candle'].values[0]).quantize(Decimal('1.00'), ROUND_HALF_EVEN)}</b>\n"
        text += f"Candle body: <b>{row['candle_body'].values[0]}</b>\n"
        text += f"Density growth: <b>{high_density} times</b>\n"
        text += f"Volume growth: <b>{row['delta'].values[0]} times</b>\n"
        text += f"Today price change: <b>{price_chg_day}%</b>\n"
        text += f"Abnormal candle time: <b>{candle_time}</b>"
        return text
    
message_generator = GenerateTextMessage()
